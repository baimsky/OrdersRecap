	



	#region Upload Shopee latest version
	[HttpPost]
	public async Task<IActionResult> Shopee(IFormFile file)
	{
		if (file == null || file.Length == 0)
			return BadRequest("File is empty.");

		string filePath = System.IO.Path.Combine(Directory.GetCurrentDirectory(), "Attachment", file.FileName);

		if (System.IO.File.Exists(filePath))
		{
			System.IO.File.Delete(filePath);
		}

		using (var stream = new FileStream(filePath, FileMode.Create))
		{
			await file.CopyToAsync(stream);
		}

		ViewBag.Message = "Files are successfully uploaded";

		List<DataRecord> listData = new List<DataRecord>();
		List<Record> tempData = _excelReader.ReadExcelFile(filePath);

		foreach (var x in tempData)
		{
			string tmpVariant = x.tempProduct;
			int tmpQty = Convert.ToInt32(x.tempQty);

			DataRecord data = new DataRecord();
			data.originalVariant = tmpVariant;
			data.variant = tmpVariant.Contains(',') ? tmpVariant.Split(',')[0].Trim().Replace(" ", "") : tmpVariant;

			var regex = new Regex(@"([A-Za-z]+)(\d*)");
			var match = regex.Match(data.variant);
			data.variantName = match.Groups[1].Value;
			data.variantNumber = match.Groups[2].Value;

			data.subVariant = tmpVariant.Contains(',') ? tmpVariant.Split(',')[1] : "";
			data.quantity = tmpQty;
			listData.Add(data);
		}

		var dataContainer = new DataContainer();
		dataContainer.summaryRecords = listData
			.GroupBy(d => new { d.variant, d.subVariant })
			.Select(g => new SummaryRecord //(g, index)
			{
				//No = index + 1,
				Variant = g.Key.variant,
				SubVariant = g.Key.subVariant,
				TotalQuantity = g.Sum(d => d.quantity),
				TotalPcs = g.Sum(d => (d.subVariant.Contains("Sidu") || d.subVariant.Contains("Bigboss") || d.variant.Contains("Sidu") || d.variant.Contains("Bigboss")) ? d.quantity * 6 : d.quantity * 1)
			})
			.OrderBy(s => s.SubVariant)
			.ThenBy(s => s.TotalPcs)
			.ThenBy(s => s.Variant)
			.ToList();

		dataContainer.SD = dataContainer.summaryRecords.Where(d => d.SubVariant.Contains("Sidu") || d.Variant.Contains("Sidu")).Sum(d => d.TotalQuantity);
		dataContainer.BB = dataContainer.summaryRecords.Where(d => d.SubVariant.Contains("Bigboss") || d.Variant.Contains("Bigboss")).Sum(d => d.TotalQuantity);
		dataContainer.SDpcs = (dataContainer.SD) * 6;
		dataContainer.BBpcs = (dataContainer.BB) * 6;

		return View(dataContainer);
	}
	#endregion


        #region Upload Shopee
        //[HttpPost]
        //public IActionResult Shopee(IFormFile[] files)
        //{
        //    string mapPath = string.Empty;
        //    // Iterate each file
        //    foreach (var file in files)
        //    {
        //        // Get the file name from the browser
        //        var fileName = System.IO.Path.GetFileName(file.FileName);

        //        // Get the file path to be uploaded
        //        var filePath = Path.Combine(Directory.GetCurrentDirectory(), "Attachment", fileName);

        //        mapPath = filePath;

        //        // Check if a file with the same name exists and delete it
        //        if (System.IO.File.Exists(filePath))
        //        {
        //            System.IO.File.Delete(filePath);
        //        }

        //        // Create a new local file and copy contents of the uploaded file
        //        using (var localFile = System.IO.File.OpenWrite(filePath))
        //        using (var uploadedFile = file.OpenReadStream())
        //        {
        //            uploadedFile.CopyTo(localFile);
        //        }
        //    }
        //    ViewBag.Message = "Files are successfully uploaded";

        //    //bisa passing ke function baru dgn parameter : mapPath, shopee,tokopedia

        //    //List<Calculate> listItem = new List<Calculate>();
        //    List<DataRecord> listData = new List<DataRecord>();

        //    string sheetName = string.Empty;
        //    using (SpreadsheetDocument myWorkbook = SpreadsheetDocument.Open(mapPath, true))
        //    {
        //        //Access the main Workbook part, which contains all references 
        //        WorkbookPart workbookPart = myWorkbook.WorkbookPart;
        //        foreach (var wsp in workbookPart.WorksheetParts)
        //        {
        //            DocumentFormat.OpenXml.Spreadsheet.Worksheet worksheet = wsp.Worksheet;
        //            //if (workbookPart.Workbook.Descendants<Sheet>().ElementAt(0).Id.ToString() == "rId1")
        //            //{
        //            //    sheetName = workbookPart.Workbook.Descendants<Sheet>().ElementAt(0).Name;
        //            //}
        //            sheetName = workbookPart.Workbook.Descendants<Sheet>().ElementAt(0).Name;
        //        }
        //    }

        //    int LineX = 2;
        //    string CellAdressX = "O" + LineX.ToString();
        //    string LineToReadX = XLGetCellValue(mapPath, sheetName, CellAdressX);

        //    int CounterRow = 0;
        //    string tempVariant = string.Empty;
        //    int tempQuantity = 0;

        //    //List<Calculate> item = new List<Calculate>();

        //    while (LineToReadX.Trim() != "")
        //    {
        //        //start
        //        CounterRow++;
        //        //tempVariant = "";
        //        //tempQuantity = 0;

        //        //get data from excel
        //        tempVariant = XLGetCellValue(mapPath, sheetName, CellAdressX);

        //        string tempQty = XLGetCellValue(mapPath, sheetName, "R" + LineX.ToString());
        //        tempQuantity = Convert.ToInt32(tempQty);

        //        //assign variables
        //        //
        //        //Calculate calc = new Calculate();
        //        //calc.no = CounterRow;
        //        //calc.variant = tempVariant.Contains(',') ? tempVariant.Split(',')[0].Trim() : tempVariant;
        //        //calc.subvariant = tempVariant.Contains(',') ? tempVariant.Split(',')[1] : "";
        //        //calc.quantity = tempQuantity;
        //        //listItem.Add(calc);

        //        DataRecord data = new DataRecord();
        //        //data.no = CounterRow;
        //        data.originalVariant = tempVariant;
        //        data.variant = tempVariant.Contains(',') ? tempVariant.Split(',')[0].Trim() : tempVariant;

        //        var regex = new Regex(@"([A-Za-z]+)(\d*)");
        //        var match = regex.Match(data.variant);
        //        data.variantName = match.Groups[1].Value;
        //        data.variantNumber = match.Groups[2].Value;

        //        data.subVariant = tempVariant.Contains(',') ? tempVariant.Split(',')[1] : "";
        //        data.quantity = tempQuantity;
        //        listData.Add(data);

        //        tempVariant = "";
        //        tempQuantity = 0;

        //        //check if end - while
        //        LineX += 1;
        //        CellAdressX = "O" + LineX.ToString();
        //        if (XLGetCellValue(mapPath, sheetName, CellAdressX) != null)
        //        {
        //            LineToReadX = XLGetCellValue(mapPath, sheetName, CellAdressX);
        //        }
        //        else
        //        {
        //            LineToReadX = "";
        //        }
        //    }

        //    var dataContainer = new DataContainer();
        //    dataContainer.summaryRecords = listData
        //        .GroupBy(d => new { d.variant, d.subVariant })
        //        .Select(g => new SummaryRecord //(g, index)
        //        {
        //            //No = index + 1,
        //            Variant = g.Key.variant,
        //            SubVariant = g.Key.subVariant,
        //            TotalQuantity = g.Sum(d => d.quantity)
        //        })
        //        .OrderBy(s => s.Variant)
        //        .ThenBy(s => s.SubVariant)
        //        .ToList();

        //    return View(dataContainer.summaryRecords);
        //}
        #endregion

        #region DownloadExcel
        //public async Task<IActionResult> DownloadExcel() //string filename
        //{
        //	//if (filename == null)
        //	//	return Content("filename is not available");

        //	var path = Path.Combine(Directory.GetCurrentDirectory(), "Attachment", DateTime.Now.ToShortDateString());

        //	var memory = CreateSpreadSheet();
        //	using (var stream = new FileStream(path, FileMode.Open))
        //	{
        //		await stream.CopyToAsync(memory);
        //		return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        //	}
        //	//memory.Position = 0;
        //	//return File(memory, GetContentType(path), Path.GetFileName(path));
        //}
        #endregion

        #region Download
        //public async Task<IActionResult> Download(string filename)
        //{
        //    if (filename == null)
        //        return Content("filename is not available");

        //    var path = Path.Combine(Directory.GetCurrentDirectory(), "Attachment", filename);

        //    var memory = new MemoryStream();
        //    using (var stream = new FileStream(path, FileMode.Open))
        //    {
        //        await stream.CopyToAsync(memory);
        //    }
        //    memory.Position = 0;
        //    return File(memory, GetContentType(path), Path.GetFileName(path));
        //}
        #endregion

	#region CreateSpreadSheet
	public MemoryStream CreateSpreadSheet()
	{
		MemoryStream mem = new MemoryStream();

		DataTable table = (DataTable)JsonConvert.DeserializeObject(JsonConvert.SerializeObject(null), (typeof(DataTable)));

		SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.
				Create(mem, SpreadsheetDocumentType.Workbook);

		WorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();
		workbookpart.Workbook = new Workbook();

		// Code omitted for brevity....
		WorksheetPart worksheetPart = workbookpart.AddNewPart<WorksheetPart>();
		var sheetData = new SheetData();
		worksheetPart.Worksheet = new Worksheet(sheetData);

		Sheets sheets = workbookpart.Workbook.AppendChild(new Sheets());
		Sheet sheet = new Sheet() { Id = workbookpart.GetIdOfPart(worksheetPart), SheetId = 1, Name = "Sheet1" };

		sheets.Append(sheet);
		Row headerRow = new Row();
		List<String> columns = new List<string>();
		foreach (DataColumn column in table.Columns)
		{
			columns.Add(column.ColumnName);
			Cell cell = new Cell();
			cell.DataType = CellValues.String;
			cell.CellValue = new CellValue(column.ColumnName);
			headerRow.AppendChild(cell);
		}

		sheetData.AppendChild(headerRow);
		foreach (DataRow dsrow in table.Rows)
		{
			Row newRow = new Row();
			foreach (String col in columns)
			{
				Cell cell = new Cell();
				cell.DataType = CellValues.String;
				cell.CellValue = new CellValue(dsrow[col].ToString());
				newRow.AppendChild(cell);
			}

			sheetData.AppendChild(newRow);
		}

		// Close the document.
		workbookpart.Workbook.Save();
		//spreadsheetDocument.Close();
		return mem;
	}
	#endregion